
services:
  
  nginx:
    image: nginx:latest
    ports:
      - "8000:80"  # Gateway exposed on 8000
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - user_service
      - video_upload

  user_service:
    build: ./user_service
    env_file:
      - .env
    # ports:
    #   - "${USER_SERVICE_PORT}:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://${PSQL_USER}:${PSQL_PASSWORD}@db:5432/${USER_DB}
    depends_on:
      - db
    volumes: # Disable on production
      - ./user_service:/app  
      - ./core:/app/core

  db:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: ${PSQL_USER}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
    ports:
      - "${PSQL_PORT}:5432"
    volumes:
      - user_data:/var/lib/postgresql/data


  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}


  redis:
    image: redis:alpine
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data

  redis_commander:
    image: rediscommander/redis-commander
    restart: always
    ports:
      - "${REDIS_COMMANDER_PORT}:8081"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "${MINIO_SERVICE}:9000"  # API
      - "${MINIO_CONSOLE}:9001"  # Console
    volumes:
      - ./minio-data:/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
  
  video_upload:
    build:
      context: ./video_upload_service
    env_file:
      - .env
    working_dir: /app/video_upload_service
    command: uvicorn app.main:app --host 0.0.0.0 --port 8002 --reload
    ports:
      - "${VIDEO_UPLOAD_SERVICE_PORT}:8002"
    volumes:
      - .:/app  
    depends_on:
      - minio
      - db
    environment:
      PYTHONPATH : /app
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      AWS_REGION : ${AWS_REGION}
      SYNC_DATABASE_URL : postgresql+psycopg2://${PSQL_USER}:${PSQL_PASSWORD}@db:5432/${VIDEOS_DB}
      REDIS_HOST : ${REDIS_HOST}
      REDIS_PORT : ${REDIS_PORT}
      INTERNAL_API_KEY : ${INTERNAL_API_KEY}
  

  video_transcoding:
    build:
      context: .
      dockerfile: ./video_transcoding_service/Dockerfile
    command: python -m app.worker
    working_dir: /app
    restart: always
    volumes:
      - ./video_transcoding_service/app:/app/app        # service code
      - ./core:/app/core                                # shared code
      - ./logs:/app/logs                                # persistent logs
      - /var/run/docker.sock:/var/run/docker.sock       # allow container spawning
    environment:
      VIDEO_UPLOAD_INTERNAL_URL: http://video_upload_service:8000/internal/update-video-status
      INTERNAL_API_KEY : ${INTERNAL_API_KEY}
      LOG_DIR: /app/logs
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}

    depends_on:
      - redis


volumes:
  user_data:
  redis_data:

